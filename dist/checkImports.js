var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
import * as fs from "fs";
import * as glob from "glob";
import * as path from "path";
import { dirname } from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const NEXT_BUILT_IN_MODULES = [
  "next/image",
  "next/link",
  "next/navigation",
  "next/font/google",
  "next/router",
];
const NODE_MODULES = [
  "@apollo/client",
  "@heroicons/react/24/outline",
  "@heroicons/react/24/solid",
  "@headlessui/react",
  "react",
  "react-dom",
  "clsx",
  "graphql",
];
const NODE_BUILT_IN_MODULES = ["fs", "path", "url", "module", "process"];
function checkImportPath(filePath, importPath) {
  return __awaiter(this, void 0, void 0, function* () {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Node.js
    if (NODE_BUILT_IN_MODULES.includes(importPath)) {
      return true;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Next.js
    if (NEXT_BUILT_IN_MODULES.includes(importPath)) {
      return true;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ node_modules
    if (
      NODE_MODULES.includes(importPath) ||
      NODE_MODULES.some((module) => importPath.startsWith(`${module}/`))
    ) {
      return true;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @/)
    if (importPath.startsWith("@/")) {
      const projectRoot = path.resolve(__dirname, "../..");
      const srcPath = path.join(projectRoot, "src");
      const importFullPath = path.resolve(
        srcPath,
        importPath.replace("@/", ""),
      );
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
      const extensions = [".ts", ".tsx", ".js", ".jsx"];
      for (const ext of extensions) {
        if (fs.existsSync(importFullPath + ext)) {
          return true;
        }
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      for (const ext of extensions) {
        if (fs.existsSync(path.join(importFullPath, `index${ext}`))) {
          return true;
        }
      }
      return false;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    if (importPath.startsWith("./") || importPath.startsWith("../")) {
      const fileDir = path.dirname(filePath);
      const importFullPath = path.resolve(fileDir, importPath);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
      const extensions = [".ts", ".tsx", ".js", ".jsx"];
      for (const ext of extensions) {
        if (fs.existsSync(importFullPath + ext)) {
          return true;
        }
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      for (const ext of extensions) {
        if (fs.existsSync(path.join(importFullPath, `index${ext}`))) {
          return true;
        }
      }
      return false;
    }
    return false;
  });
}
function checkFileImports(filePath) {
  return __awaiter(this, void 0, void 0, function* () {
    const errors = [];
    const content = fs.readFileSync(filePath, "utf-8");
    const lines = content.split("\n");
    const importRegex = /^import\s+(?:{[^}]*}|\w+)\s+from\s+['"]([^'"]+)['"]/;
    for (const [index, line] of lines.entries()) {
      const match = line.match(importRegex);
      if (match) {
        const importPath = match[1];
        const isValid = yield checkImportPath(filePath, importPath);
        if (!isValid) {
          errors.push({
            file: filePath,
            line: index + 1,
            importPath,
            error: `–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–ª–∏ –º–æ–¥—É–ª—å: ${importPath}`,
          });
        }
      }
    }
    return errors;
  });
}
function checkProjectImports() {
  return __awaiter(this, void 0, void 0, function* () {
    const errors = [];
    const files = glob.sync("src/**/*.{ts,tsx}");
    for (const file of files) {
      const fileErrors = yield checkFileImports(file);
      errors.push(...fileErrors);
    }
    return { valid: errors.length === 0, errors };
  });
}
function main() {
  return __awaiter(this, void 0, void 0, function* () {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n");
    const result = yield checkProjectImports();
    if (result.valid) {
      console.log("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
    } else {
      console.log("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö:");
      result.errors.forEach((error) => {
        console.log(`\n–§–∞–π–ª: ${error.file}`);
        console.log(`–°—Ç—Ä–æ–∫–∞: ${error.line}`);
        console.log(`–ò–º–ø–æ—Ä—Ç: ${error.importPath}`);
        console.log(`–û—à–∏–±–∫–∞: ${error.error}`);
      });
      process.exit(1);
    }
  });
}
main();
