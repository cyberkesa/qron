import * as fs from 'fs';
import * as glob from 'glob';
import * as path from 'path';
import { dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

interface ImportError {
  file: string;
  line: number;
  importPath: string;
  error: string;
}

interface ImportResult {
  valid: boolean;
  errors: ImportError[];
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Next.js
const NEXT_BUILT_IN_MODULES = [
  'next/image',
  'next/link',
  'next/navigation',
  'next/font/google',
  'next/router',
  'next/head',
  'next/script',
  'next/dynamic',
  'next/server',
  'next/headers',
  'next/dist/client/app-router',
  'next/cache',
  'next/constants',
];

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ node_modules
const NODE_MODULES = [
  '@apollo/client',
  '@apollo/experimental-nextjs-app-support',
  '@heroicons/react/24/outline',
  '@heroicons/react/24/solid',
  '@headlessui/react',
  'react',
  'react-dom',
  'clsx',
  'graphql',
  'tailwind-merge',
  'rxjs',
  'node-fetch',
  'react-input-mask',
  'tslib',
  'tailwindcss',
  'crypto-js',
  'js-cookie',
  'lodash',
  'zod',
  'uuid',
  'react-hook-form',
];

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Node.js
const NODE_BUILT_IN_MODULES = [
  'fs',
  'path',
  'url',
  'module',
  'process',
  'crypto',
  'http',
  'https',
  'querystring',
  'stream',
  'buffer',
  'util',
  'events',
  'zlib',
  'assert',
  'os',
  'child_process',
];

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
function checkFileExistsWithExtensions(
  basePath: string,
  extensions: string[]
): boolean {
  for (const ext of extensions) {
    if (fs.existsSync(basePath + ext)) {
      return true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ index —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  try {
    if (fs.existsSync(basePath) && fs.statSync(basePath).isDirectory()) {
      for (const ext of extensions) {
        if (fs.existsSync(path.join(basePath, `index${ext}`))) {
          return true;
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  }

  return false;
}

async function checkImportPath(
  filePath: string,
  importPath: string
): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Node.js
  if (NODE_BUILT_IN_MODULES.includes(importPath)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Next.js
  if (
    NEXT_BUILT_IN_MODULES.includes(importPath) ||
    NEXT_BUILT_IN_MODULES.some((module) => importPath.startsWith(`${module}/`))
  ) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ node_modules –∏ –∏—Ö –ø–æ–¥–º–æ–¥—É–ª–∏
  if (
    NODE_MODULES.includes(importPath) ||
    NODE_MODULES.some((module) => importPath.startsWith(`${module}/`))
  ) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤ node_modules
  try {
    const projectRoot = path.resolve(__dirname, '../..');
    const nodeModulesPath = path.join(projectRoot, 'node_modules', importPath);
    if (fs.existsSync(nodeModulesPath)) {
      return true;
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ node_modules
  }

  const extensions = [
    '.ts',
    '.tsx',
    '.js',
    '.jsx',
    '.json',
    '.css',
    '.scss',
    '.module.css',
    '.module.scss',
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @/)
  if (importPath.startsWith('@/')) {
    const projectRoot = path.resolve(__dirname, '../..');
    const srcPath = path.join(projectRoot, 'src');
    const importFullPath = path.resolve(srcPath, importPath.replace('@/', ''));

    return checkFileExistsWithExtensions(importFullPath, extensions);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  if (importPath.startsWith('./') || importPath.startsWith('../')) {
    const fileDir = path.dirname(filePath);
    const importFullPath = path.resolve(fileDir, importPath);

    return checkFileExistsWithExtensions(importFullPath, extensions);
  }

  // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ node
  // –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  return true;
}

async function checkFileImports(filePath: string): Promise<ImportError[]> {
  const errors: ImportError[] = [];
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');

  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–º–ø–æ—Ä—Ç–æ–≤
  const importRegexes = [
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç: import X from 'path'
    /^import\s+(?:{[^}]*}|\w+|\*\s+as\s+\w+)\s+from\s+['"]([^'"]+)['"]/,
    // –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–∞: import 'path'
    /^import\s+['"]([^'"]+)['"]/,
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç: const X = import('path')
    /import\(['"]([^'"]+)['"]\)/,
    // –ò–º–ø–æ—Ä—Ç —Å type: import type { X } from 'path'
    /^import\s+type\s+(?:{[^}]*}|\w+)\s+from\s+['"]([^'"]+)['"]/,
    // require: require('path')
    /require\(['"]([^'"]+)['"]\)/,
  ];

  for (const [lineIndex, line] of lines.entries()) {
    for (const regex of importRegexes) {
      const match = line.match(regex);
      if (match) {
        const importPath = match[1];
        const isValid = await checkImportPath(filePath, importPath);
        if (!isValid) {
          errors.push({
            file: filePath,
            line: lineIndex + 1,
            importPath,
            error: `–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–ª–∏ –º–æ–¥—É–ª—å: ${importPath}`,
          });
        }
        break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
      }
    }
  }

  return errors;
}

async function checkProjectImports(): Promise<ImportResult> {
  const errors: ImportError[] = [];
  const files = glob.sync('src/**/*.{ts,tsx}');

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...`);
  let processed = 0;

  for (const file of files) {
    const fileErrors = await checkFileImports(file);
    errors.push(...fileErrors);

    processed++;
    if (processed % 50 === 0 || processed === files.length) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${files.length} —Ñ–∞–π–ª–æ–≤...`);
    }
  }

  return { valid: errors.length === 0, errors };
}

async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n');

  try {
    const result = await checkProjectImports();

    if (result.valid) {
      console.log('‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    } else {
      console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö:');
      result.errors.forEach((error) => {
        console.log(`\n–§–∞–π–ª: ${error.file}`);
        console.log(`–°—Ç—Ä–æ–∫–∞: ${error.line}`);
        console.log(`–ò–º–ø–æ—Ä—Ç: ${error.importPath}`);
        console.log(`–û—à–∏–±–∫–∞: ${error.error}`);
      });
      process.exit(1);
    }
  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤:', error);
    process.exit(1);
  }
}

main();
